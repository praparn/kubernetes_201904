Instructor for Monitor Kubernetes Farm with Prometheus and Grafana:
====================================================
Part0: Install Metric Server
====================================================
1. (Master) Create Metric Server:
	cd ~/kubernetes_20181124/WorkShop_2.8_HPA_WorkShop/metrics-server/
	kubectl create -f deploy/1.8+/
	kubectl get pods --all-namespaces
	kubectl logs pods/<metrics's pods name> -n=kube-system

2. (Master) Test get performance data from metric server by command:
	kubectl top nodes

====================================================
Part1: Install Helm Server
====================================================
1. (Master) Install helm client on master node by command:
		curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh
		chmod 700 get_helm.sh
		./get_helm.sh

2. (Master) Enable role for tiller by command:
        kubectl create clusterrolebinding tiller-cluster-admin \
                --clusterrole=cluster-admin \
                --serviceaccount=kube-system:default
    
3. (Master) Initial Helm by command:
		helm init
	
4. (Master) Monitor Tiller until it ready:
		watch kubectl get pods -n=kube-system

5. (Master) Check helm readiness by command:
		helm list			==> Expect blank

6. (Master) Update helm standard repository by command:
		helm repo add stable https://kubernetes-charts.storage.googleapis.com

====================================================
Part2: Create Application and Service for Operate
====================================================
1. (Master) Create Namespace by command:
	kubectl create -f webtest_deploy_hpa.yml (In case github: kubectl create -f https://raw.githubusercontent.com/praparn/kubernetes_20180701/master/WorkShop_2.8_HPA_WorkShop/webtest_deploy_hpa.yml)
	 
2. (Master) Check Pods status by command:
	kubectl get deployment/webtest -o wide
	kubectl get svc/webtest -o wide

3. (Master) Test Access by url:
	http://x.x.x.x:32500

====================================================
Part3: Install Prometheus-operator with Helm
====================================================
1. (Master) Create ServiceAccount for Tiller in the kube-system namespace by command: (Optional)
	kubectl -n kube-system create sa tiller

2. (Master) Create ClusterRoleBinding for Tiller by command: (Optional)
	kubectl create clusterrolebinding tiller --clusterrole cluster-admin --serviceaccount=kube-system:tiller

3. (Master) Install Tiller, specifying the new ServiceAccount (Optional)
	helm init --service-account tiller

4. (Master) Install Prometheus-operator by command:
	helm repo add coreos https://s3-eu-west-1.amazonaws.com/coreos-charts/stable/
	helm install coreos/prometheus-operator --name prometheus-operator --namespace monitoring
	helm install coreos/kube-prometheus --name kube-prometheus --namespace monitoring	

5. (Master) Check result of pods by commands:
	watch kubectl get pods -n monitoring

6. (Master) Check CustomerResourceDefinition by command:
	kubectl get CustomResourceDefinition
	############################################
	*Remark:  Expect to found record below
	prometheuses.monitoring.coreos.com            2018-11-04T03:32:35Z
	prometheusrules.monitoring.coreos.com         2018-11-04T03:32:35Z
	servicemonitors.monitoring.coreos.com         2018-11-04T03:32:35Z
	############################################

====================================================
Part4: Open dashboard for access
====================================================
1. (Master) Check pods name and service name by command: 
	kubectl get pods -n=monitoring				==> Record name of grafana, prometheus pods
	kubectl get svc -n=monitoring

2. (local) Port forward for Grafana's dashboard
	kubectl --kubeconfig ./adminconfig.conf port-forward <Grafana pods's name> 3000 -n=monitoring
	(Ex: kubectl --kubeconfig ./adminconfig.conf port-forward kube-prometheus-grafana-6f6c894c5b-x4svm 3000 -n=monitoring)
3. (local) Open browser and open granfana dashboard by url http://127.0.0.1:3000

4. (local) Port forward for Prometheus's dashboard
	kubectl --kubeconfig ./adminconfig.conf port-forward <Prometheus pods's name> 9090 -n=monitoring
	(Ex:kubectl --kubeconfig ./adminconfig.conf port-forward prometheus-kube-prometheus-0 9090 -n=monitoring)

====================================================
Part5: Test generate load
====================================================
1. (Master) Generate Load:
	kubectl run -i --tty load-generator --image=busybox /bin/sh			==> <Check Until Load Generator WorkFine>
	wget -q -O- http://webtest.default.svc.cluster.local:5000
	while true; sleep 0.001; do wget -q -O- http://webtest.default.svc.cluster.local:5000; done

2. (Master) Monitor Performance via Grafana and command line: (Interval is 5 min)
	kubectl top pods
	kubectl top nodes

3. (Master) Scale Down by Ctrl+C on load-generate

4. (Master) CleanUp Lab
	kubectl delete deployment/load-generator
	kubectl delete -f webtest_deploy_hpa.yml (In case github: kubectl delete -f https://raw.githubusercontent.com/praparn/kubernetes_20181124/master/WorkShop_2.8_HPA_WorkShop/webtest_deploy_hpa.yml)